import { writeFileSync } from 'fs';

function dedent(strings: TemplateStringsArray, ...values: any[]): string {
  // 1. นำ string ทั้งหมดมาต่อกันให้สมบูรณ์ก่อน
  let fullString = strings.reduce((result, str, i) => {
    return result + str + (values[i] || '');
  }, '');

  // 2. ลบ \n แรกสุดที่มักจะติดมากับการขึ้นบรรทัดใหม่หลัง backtick
  if (fullString.startsWith('\n')) {
    fullString = fullString.substring(1);
  }

  // 3. หาค่า indentation ที่น้อยที่สุดจากทุกบรรทัด (ยกเว้นบรรทัดว่าง)
  const lines = fullString.split('\n');
  const minIndentation = lines
    .filter(line => line.trim().length > 0)
    .reduce((min, line) => {
      const indentation = line.match(/^(\s*)/)[0].length;
      return Math.min(min, indentation);
    }, Infinity);

  // 4. ถ้ามี indentation, ให้ลบออกจากทุกบรรทัด
  if (minIndentation !== Infinity && minIndentation > 0) {
    const dedentedLines = lines.map(line => line.substring(minIndentation));
    fullString = dedentedLines.join('\n');
  }

  // 5. คืนค่า string ที่จัดรูปแบบเรียบร้อยแล้ว
  return fullString;
}

const util = require('util');
const exec = util.promisify(require('child_process').exec);

async function createVersionsFile(filename: string) {
  const revision = (await exec('git rev-parse --short HEAD')).stdout.toString().trim();
  const branch = (await exec('git rev-parse --abbrev-ref HEAD')).stdout.toString().trim();
  const date = new Date().toLocaleString('en-GB', { timeZone: 'Asia/Bangkok' });
  console.log(`version: '${process.env.npm_package_version}', revision: '${revision}', branch: '${branch}', date: '${date}'`);

  const content = dedent`
      // this file is automatically generated by git.version.ts script
      export const versions = {
        version: '${process.env.npm_package_version}',
        revision: '${revision}',
        branch: '${branch}',
        date: '${date}'
      };`;

  writeFileSync(filename, content, { encoding: 'utf8' });
}

createVersionsFile('src/environments/versions.ts');
